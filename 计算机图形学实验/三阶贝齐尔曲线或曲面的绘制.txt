#include<GL/GLUT.H>
#include <windows.h>    
#include <math.h>    
#include <gl/GL.h>    
#include <iostream>
#include <stdio.h>
using namespace std;

GLfloat p1[] = { -0.8f, 0.1f };
GLfloat p2[] = { -0.4f, 0.6f };
GLfloat p3[] = { 0.2f, 0.8f };
GLfloat p4[] = { 0.7f, 0.2f };

float angle = -40.0;
float lx = 1.0, ly = 1.0, lz = 0.0;

void SpecialKeys(int key, int x, int y) {
	if (key == GLUT_KEY_UP) {
		angle += 4.0f;
		ly = 1.0;
	}
	if (key == GLUT_KEY_DOWN) {
		angle -= 4.0f;
		ly = 1.0;
	}
	if (key == GLUT_KEY_LEFT) {
		angle += 5.0f;
		ly = 0.0;
	}
	if (key == GLUT_KEY_RIGHT) {
		angle -= 5.0f;
		ly = 0.0;
	}
	if (key == 'q') {
		exit(0);
	}
	
	if (angle > 356.0f) angle = 0.0f;
	if (angle < -1.0f) angle = 355.0f;
	glutPostRedisplay();
}

void SpecialKey(unsigned char key, int x, int y) {
	if (key == GLUT_KEY_UP) {
		angle += 4.0f;
		ly = 1.0;
	}
	if (key == GLUT_KEY_DOWN) {
		angle -= 4.0f;
		ly = 1.0;
	}
	if (key == GLUT_KEY_LEFT) {
		angle += 5.0f;
		ly = 0.0;
	}
	if (key == GLUT_KEY_RIGHT) {
		angle -= 5.0f;
		ly = 0.0;
	}
	if (key == 'q') {
		exit(0);
	}
	
	if (angle > 356.0f) angle = 0.0f;
	if (angle < -1.0f) angle = 355.0f;
	glutPostRedisplay();
}
	
void myDisplay(void) {
	glClear(GL_COLOR_BUFFER_BIT);

	glPointSize(3);
	glRotatef(angle, lx, ly, lz);
	glColor3f(1.0, 0.0, 0.0);

	glBegin(GL_POINTS);
	glVertex2f(p1[0], p1[1]);
	glVertex2fv(p2);
	glVertex2fv(p3);
	glVertex2fv(p4);
	glEnd();

	/*glColor3f(0.0, 0.0, 1.0);
	glBegin(GL_LINE_STRIP);
	glVertex2fv(p1);
	glVertex2fv(p2);
	glVertex2fv(p3);
	glVertex2fv(p4);
	glEnd();*/


	GLfloat ps[11][2];

	GLint i = 0;
	for (double t = 0.0; t <= 1.0; t += 0.1)
	{

		double a1 = pow((1 - t), 3);
		double a2 = pow((1 - t), 2) * 3 * t;
		double a3 = 3 * t * t * (1 - t);
		double a4 = t * t * t;
		ps[i][0] = a1 * p1[0] + a2 * p2[0] + a3 * p3[0] + a4 * p4[0];
		ps[i][1] = a1 * p1[1] + a2 * p2[1] + a3 * p3[1] + a4 * p4[1];
		i = i + 1;
	}

	glColor3f(1.0, 1.0, 0.0);
	glBegin(GL_LINE_STRIP);
	for (int i = 0; i < 11; i++)
	{
		glVertex2fv(ps[i]);
	}
	glEnd();
	glFlush();
}

int choice;

GLfloat ctrlPoints[4][4][3] =
{
	{
		{ -0.8f, 0.8f, 0.1f },
		{ -0.9f, 0.3f, 0.3f },
		{ -0.9f, -0.2f, 0.3f },
		{ -0.8f, -0.7f, 0.2f }
	},
	{
		{ -0.3f, 0.8f, 0.2f },
		{ -0.3f, 0.2f, 0.5f },
		{ -0.25f, -0.2f, 0.6f },
		{ -0.3f, -0.6f, 0.2f }
	},
	{
		{ 0.2f, 0.85f, 0.1f },
		{ 0.25f, 0.25f, 0.6f },
		{ 0.3f, -0.2f, 0.4f },
		{ 0.2f, -0.65f, 0.3f }
	},
	{
		{ 0.7f, 0.8f, 0.1f },
		{ 0.8f, 0.3f, 0.3f },
		{ 0.75f, -0.2f, 0.3f },
		{ 0.7f, -0.7f, 0.2f }
	}
};

void display(void)
{

	glClear(GL_COLOR_BUFFER_BIT);

	glClearColor(0.0, 0.0, 0.0, 0.0);
	glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4,
		0, 1, 12, 4, &ctrlPoints[0][0][0]);
	glEnable(GL_MAP2_VERTEX_3);


	int i, j;
	glColor3f(1.0, 0.0, 1.0);	
	//glutKeyboardFunc(keyboard);
	glRotatef(angle, lx, ly, lz);

	for (j = 0; j <= 10; j++) {
		glBegin(GL_LINE_STRIP);
		for (i = 0; i <= 10; i++)
			glEvalCoord2f((GLfloat)i / 10.0, (GLfloat)j / 10.0);
		glEnd();
		glBegin(GL_LINE_STRIP);
		for (i = 0; i <= 10; i++)
			glEvalCoord2f((GLfloat)j / 10.0, (GLfloat)i / 10.0);
		glEnd();
	}

	
	glPointSize(5.0);
	glColor3f(1.0, 1.0, 0.0);

	for (int i = 0; i < 4; i++) {
		glBegin(GL_POINTS);
		for (int j = 0; j < 4; j++)
			glVertex3fv(&ctrlPoints[i][j][0]);
		glEnd();
	}

	/*glColor3f(0.0, 1.0, 1.0);
	for (int i = 0; i < 4; i++) {
		glBegin(GL_LINE_STRIP);
		for (int j = 0; j < 4; j++)
			glVertex3fv(&ctrlPoints[i][j][0]);
		glEnd();
		glBegin(GL_LINE_STRIP);
		for (int j = 0; j < 4; j++)
			glVertex3fv(&ctrlPoints[j][i][0]);
		glEnd();
	}*/
	glFlush();	
}


int main(int argc, char* argv[])
{
    printf("1.bezier曲线\n");
    printf("2.bezier曲面\n");
    printf("please input your choose:");
    scanf_s("%d", &choice);
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);
	glutInitWindowPosition(100, 100);
	glutInitWindowSize(500, 500);
	glutCreateWindow("my program");
	glutKeyboardFunc(SpecialKey);
	
    switch (choice)
    {
    case 1:glutSpecialFunc(SpecialKeys);
		glutDisplayFunc(&myDisplay);
	       glutMainLoop();
           break;
    case 2:
		glutDisplayFunc(display);
		glutSpecialFunc(SpecialKeys);
           glutMainLoop();
           break;
    default:break;
    }	
	return 0;
}


